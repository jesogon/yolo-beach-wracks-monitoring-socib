"""Fixtures module for api predict. This is a configuration file designed
to prepare the tests function arguments on the test_*.py files located in
the same folder.

You can add new fixtures following the next structure:
```py
@pytest.fixture(scope="module", params=[{list of possible arguments}])
def argument_name(request):
    # You can add setup code here for your argument/fixture
    return request.param  # Argument that will be passed to the test
```
The fixture argument `request` includes the parameter generated by the
`params` list. Every test in the folder that uses the fixture will be run
at least once with each of the values inside `params` list unless specified
otherwise. The parameter is stored inside `request.param`.

When multiple fixtures are defined with more than one parameter, every tests
will run multiple times, each with one of all the possible combinations of
the generated parameters unless specified otherwise. For example, in the
following configuration:
```py
@pytest.fixture(scope="module", params=['a','b'])
def my_fixture1(request):
    return request.param

@pytest.fixture(scope="module", params=['x','y'])
def my_fixture2(request):
    return request.param
```
The for the test functions in this folder, the following combinations will
be generated:
    - Tests that use only one my_fixture1: ['a','b']
    - Tests that use only one my_fixture2: ['x','y']
    - Tests that use both: [('a','x'), ('a','y'), ('b','x'), ('b','y')]
    - Tests that use none of the fixtures: []

Be careful when using multiple fixtures with multiple parameters, as the
number of tests generated can grow exponentially.
"""

# pylint: disable=redefined-outer-name
import pytest
import os
from deepaas.model.v2.wrapper import UploadedFile
import api
from api import config
import fnmatch

DATA_FILES = os.listdir(
    os.path.join(config.TEST_DATA_PATH, "seg/test")
)


# Fixture for the 'files' parameter@pytest.fixture(
@pytest.fixture(
    scope="module",
    params=fnmatch.filter(DATA_FILES, "*.jpg")
    + fnmatch.filter(DATA_FILES, "*.png"),
)
def files(request):
    file = os.path.join(
        os.path.join(config.TEST_DATA_PATH, "seg/test"), request.param
    )

    content_type = "application/octet-stream"
    return UploadedFile("files", file, content_type, request.param)


# Fixture for the 'model' parameter
@pytest.fixture(scope="module", params=["socib-beach-wracks-identification.yaml"])
def model_param(request):
    return request.param


@pytest.fixture(scope="module", params=[False])
def mlflow_fetch(request):
    return request.param


# Fixture for the 'task_type' parameter
@pytest.fixture(scope="module", params=["seg"])
def task_type_param(request):
    return request.param


# Fixture for the 'conf' parameter
@pytest.fixture(scope="module", params=[0.25])
def conf_param(request):
    return request.param


# Fixture for the 'iou' parameter
@pytest.fixture(scope="module", params=[0.5])
def iou_param(request):
    return request.param


# Fixture for the 'show_labels' parameter
@pytest.fixture(scope="module", params=[True])
def show_labels_param(request):
    return request.param


# Fixture for the 'show_conf' parameter
@pytest.fixture(scope="module", params=[True])
def show_conf_param(request):
    return request.param


# Fixture for the 'augment' parameter
@pytest.fixture(scope="module", params=[False])
def augment_param(request):
    return request.param


# Fixture for the 'classes' parameter
@pytest.fixture(scope="module", params=[None])
def classes_param(request):
    return request.param


# Fixture for the 'boxes' parameter
@pytest.fixture(scope="module", params=[True])
def boxes_param(request):
    return request.param


# Fixture for the 'accept' parameter
@pytest.fixture(scope="module", params=["application/json"])
def accept_param(request):
    return request.param


@pytest.fixture(scope="module")
def pred_kwds(
    files,
    model_param,
    task_type_param,
    conf_param,
    iou_param,
    show_conf_param,
    show_labels_param,
    augment_param,
    classes_param,
    boxes_param,
    accept_param,
    mlflow_fetch,
):
    """Fixture to return arbitrary keyword arguments for predictions."""
    pred_kwds = {
        "files": files,
        "model": model_param,
        "task_type": task_type_param,
        "conf": conf_param,
        "iou": iou_param,
        "show_conf": show_conf_param,
        "show_labels": show_labels_param,
        "augment": augment_param,
        "classes": classes_param,
        "boxes": boxes_param,
        "accept": accept_param,
        "mlflow_fetch": mlflow_fetch,
    }
    print(f"the args for detections are {pred_kwds}")
    return {k: v for k, v in pred_kwds.items()}


@pytest.fixture(scope="module")
def test_predict(pred_kwds):
    """Test the predict function."""

    result = api.predict(**pred_kwds)
    return result, pred_kwds["accept"], pred_kwds["task_type"]
